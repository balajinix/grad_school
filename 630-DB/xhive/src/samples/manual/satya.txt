declare function getLargeItemsets($C as element(),$minsup as element(),$total as element(),$src as element()) as element()* \n { \n \t for $items in $C \n \t let $trans := (for $tran in $src \n \t \t where every $item1 in $items/* satisfies \n \t \t \t some $item2 in $tran/* \n \t \t \t satisfies $item1 = $item2 \n \t \t return $tran) \n \t let $sup := (count($trans) * 1.00) div $total \n \t where $sup >= $minsup \n \t return <largeItemset> {$items} \n \t \t <support> {$sup} </support> \n \t </largeItemset> \n }; \n \n declare function join($X as element(),$Y as element()) as element()* \n { \n let $items := ( \n \t for $item in $Y \n \t \t where every $i in $X satisfies \n \t \t \t $i != $item \n \t \t return $item) \n \t return $X union $items \n }; \n \n declare function commonIts($X as element(),$Y as element()) as element()* \n { \n \t for $item in $X \n \t where some $i in $Y satisfies $i = $item \n \t return $item \n }; \n \n declare function removeIts($X as element(),$Y as  element()) as element()* \n { \n \t for $item in $X \n \t where every $i in $Y satisfies $i != $item \n \t return $item \n }; \n \n declare function candidateGen($l as element()) as element()* \n { \n \t for $freqSet1 in $l \n \t let $items1 := $freqSet1//items/* \n \t \t for $freqSet2 in $l \n \t \t let $items2 := $freqSet2//items/* \n \t \t where $freqSet2 >> $freqSet1 and \n \t \t \t count($items1)+1 = \n \t \t \t \t count($items1 union $items2) \n \t \t \t and prune(join($items1,$items2), $l) \n \t \t return <items> \n \t \t \t {join($items1,$items2)} \n \t \t </items> \n }; \n \n declare function prune($X as element(),$Y as element()) as xs:boolean \n { \n \t every $item in $X satisfies \n \t some $items in $Y//items satisfies \n \t count(commonIts(removeIts($X,$item),$items/*)) \n \t = count($X) - 1 \n}; \n \n declare function removeDuplicate($C as element()) as element()* \n { \n \t for $itemset1 in $C \n \t let $items1 := $itemset1/* \n \t let $items :=(for $itemset2 in $C \n \t \t let $items2 := $itemset2/* \n \t \t where $itemset2>>$itemset1 and \n \t \t count($items1) = \n \t \t count(commonIts($items1, $items2)) \n \t \t return $items2) \n \t where count($items) = 0 \n \t \t return $itemset1 \n}; \n \n declare function apriori($l as element() ,$L as element(), $minsup as element(), $total as element(), $src as element()) as element()* \n { \n let $C := removeDuplicate(candidateGen($l)) \n let $l := getLargeItemsets($C, $minsup, $total, $src) \n let $L := $l union $L \n return \t if (empty($l)) then \n \t $L \n else \n \t apriori($l, $L, $minsup, $total, $src) \n }; \n \n let $src := document('/')//transactions/transaction/items \n let $minsup := xs:double(0.3) \n let $total := xs:double(count($src) * 1.00) \n let $C := distinct-values($src/*) \n let $l :=(for $itemset in $C \n \t let $items := (for $item in $src/* \n \t \t where $itemset = $item \n \t \t return $item) \n \t let $sup := (count($items) * 1.00) div $total \n \t where $sup >= $minsup \n \t return <largeItemset> \n \t \t <items> {$itemset} </items> \n \t \t <support> {$sup} </support> \n \t \t </largeItemset>) \n let $L := $l \n return <largeItemsets> { apriori($l, $L,$minsup, $total, $src) } \n \t </largeItemsets>



\n let $L := $l \n return <largeItemsets> { apriori($l, $L,$minsup, $total, $src) } \n \t </largeItemsets>

for $itemset in $C \n \t let $items := (for $item in $src/* \n \t \t where $itemset = $item \n \t \t return $item) \n \t let $sup := (count($items) * 1.00) div $total \n \t where $sup >= $minsup \n \t


and prune(join($items1,$items2), $l) \n \t \t